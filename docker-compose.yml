version: "3"

services:

  traefik_frontend:
    image: traefik
    command: -c /dev/null --api --docker --docker.domain=fe.localhost --logLevel=DEBUG
    networks:
      - proxy
      - frontend
    labels:
      - "traefik.enable=false"
    ports:
#      - "8080:8080"  # Enable if you want see Admin Panel of traefik_frontend
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  phpfrontend:
    image: richarvey/nginx-php-fpm
#    ports:
#      - "8084:80" # Enable if you want see direct phpfrontend
    labels:
      - "traefik.backend=fe"
      - "traefik.frontend.rule=Host:fe.localhost"
      - "traefik.docker.network=test_frontend"
      - "traefik.port=80"
    networks:
      - frontend
      - backend
    volumes:
      - $PWD/application/frontend/:/var/www/html/
    deploy:
      replicas: 2

  traefik_backend:
    image: traefik
    command: -c /dev/null --api --docker --docker.domain=php-backend --logLevel=DEBUG
#    ports:
#      - "8081:8080" # Enable if you want see Admin Panel of traefik_backend
    labels:
      - "traefik.enable=false"
    networks:
      frontend:
        aliases:
          - php-backend
      backend:
#        aliases:
#          - php-backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  phpbackend:
    image: richarvey/nginx-php-fpm
#    ports:
#      - "8085:80" # Enable if you want see direct phpbackend
    labels:
      - "traefik.backend=be"
      - "traefik.frontend.rule=Host:php-backend"
      - "traefik.port=80"
      - "traefik.docker.network=test_backend"
    networks:
      - backend
      - db
    volumes:
      - $PWD/application/backend/:/var/www/html/
    deploy:
      replicas: 2

  db:
    image: mysql:5.7
    hostname: backend-db
    labels:
      - "traefik.enable=false"
    volumes:
      - $PWD/db/data/:/var/lib/mysql
    restart: always
    networks:
      db:
        aliases:
         - db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: backend
      MYSQL_USER: backend
      MYSQL_PASSWORD: backend

  prometheus:
    image: stefanprodan/swarmprom-prometheus:v2.2.0-rc.0
    networks:
      - frontend
      - backend
      - db
    command:
      - '--config.file=/etc/prometheus/prometheus1.yml'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=24h'
    volumes:
      - $PWD/prometheus/data/:/prometheus
      - $PWD/prometheus/conf/prometheus.yml:/etc/prometheus/prometheus1.yml
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  cadvisor:
    image: google/cadvisor
    networks:
      - db
      - frontend
      - backend
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  caddy:
    image: stefanprodan/caddy
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
      - "9094:9094"
    networks:
      - frontend
      - backend
      - db
    environment:
      - ADMIN_USER=admin
      - ADMIN_PASSWORD=justasuperpass
    volumes:
      - $PWD/caddy/Caddyfile:/etc/caddy/Caddyfile
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 5s
      timeout: 1s
      retries: 5


  grafana:
    image: stefanprodan/swarmprom-grafana:5.0.1
    networks:
      - frontend
      - backend
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=hardwsecurepass
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - $PWD/grafana/data:/var/lib/grafana
#      - /data/docker/swarmprom/grafana/dashboard:/etc/grafana/dashboards/
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M


networks:
  proxy:
    driver: overlay
    external: true
  frontend:
    driver: overlay
    external: false
  backend:
    driver: overlay
    external: false
  db:
    driver: overlay
    external: false


